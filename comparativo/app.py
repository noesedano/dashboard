#Creamos el archivo de la APP en el interprete principal (Python)

##########################################
#Importamos librerias
import streamlit as st
import plotly.express as px
import pandas as pd
from streamlit_option_menu import option_menu
from funpymodeling.exploratory import freq_tbl
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.figure_factory as ff
import plotly.graph_objects as go

st.set_page_config(layout="wide")
##########################################
#Definimos la instancia
@st.cache_resource


##########################################
#Creamos la funcion de carga de datos
def load_data():
    #Lectura del archivo csv
    df_chicago =pd.read_csv("Chicago.csv")
    #df_chicago = df_chicago.drop(['Unnamed: 0', 'Unnamed: 0.1'], axis = 1)

    df_mexico =pd.read_csv("Mexico.csv")
    #df_mexico = df_mexico.drop(['Unnamed: 0'], axis = 1)
    mexico_numeric_df = df_mexico.select_dtypes(['float', 'int'])
    mexico_text_df = df_mexico.select_dtypes(['object']) 

    #Selecciono las columnas tipo numericas del dataframe
    chicago_numeric_df = df_chicago.select_dtypes(['float', 'int'])   #Devuelve columnas
    numeric_cols = chicago_numeric_df.columns                         #Devuelve lista de columnas

    #Selecciono las columnas tipo texto del dataframe
    chicago_text_df = df_chicago.select_dtypes(['object'])   #Devuelve columnas
    text_cols = chicago_text_df.columns                         #Devuelve lista de columnas
    
    #Carga de Praga (PragaClean1)
    df_praga =pd.read_csv("PragaClean1.csv")
    praga_numeric_df = df_praga.select_dtypes(['float', 'int'])
    praga_text_df = df_praga.select_dtypes(['object']) 

    #Carga de  (buenos aires)
    df_buenosaires =pd.read_csv("BuenosA.csv")
    buenosaires_numeric_df = df_buenosaires.select_dtypes(['float', 'int'])
    buenosaires_text_df = df_buenosaires.select_dtypes(['object']) 

    return df_chicago, df_mexico, df_praga, df_buenosaires, numeric_cols, text_cols, chicago_numeric_df, chicago_text_df, mexico_numeric_df, mexico_text_df, praga_numeric_df, praga_text_df, buenosaires_numeric_df, buenosaires_text_df

##########################################
#Cargo los datos obtenidos de la funcion "load_data"
#Arg
df_chicago, df_mexico, df_praga, df_buenosaires, numeric_cols, text_cols, chicago_numeric_df, chicago_text_df, mexico_numeric_df, mexico_text_df, praga_numeric_df, praga_text_df, buenosaires_numeric_df, buenosaires_text_df = load_data()

##########################################
#Dashboard

#Navbar
View = option_menu(
    menu_title=None,  # Oculta el t√≠tulo
    options= ["Inicio", "Modelado explicativo", "Modelado predictivo"],
    icons=["house", "graph-up", "cpu"],  # √çconos de Bootstrap
    menu_icon="cast",
    default_index=0,
    orientation="horizontal",
)

#Logo
import base64
def get_img_as_base64(file_path):
    with open(file_path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

img_base64 = get_img_as_base64("img/airbnb.png")

##########################################
#Index

if View == "Inicio":
    st.title("Airbnb")
    st.write("Este dashboard presenta un Modelado explicativo usando un an√°lisis univariado "
                        "de las variables categ√≥ricas m√°s significativas y un Modelado predictivo usando "
                        "un an√°lisis aplicando regresi√≥n lineal simple, regresi√≥n lineal multiple y regresi√≥n logistica,"
                        "esto haciendo uso de los datos propios de Airbnb acerca de las ciudades de Chicago Illinois, EU y Ciudad de M√©xico, MX.")
    img, title = st.columns([1, 7])
    left, right = st.columns([3, 1])
    img.image("img/airbnb.png", width=80)
    title.header("Acerca de Airbnb")
    left.subheader("¬øQue es?")
    left.write("Airbnb es una plataforma digital que conecta a personas que desean alquilar su propiedad "
                            "(total o parcialmente) con viajeros que buscan alojamiento temporal. Fundada en 2008, "
                            "Airbnb ha transformado la industria del hospedaje, ofreciendo alternativas m√°s flexibles y "
                            "personalizadas que los hoteles tradicionales.A trav√©s de su modelo de econom√≠a colaborativa, "
                            "permite que anfitriones publiquen espacios disponibles y que hu√©spedes puedan reservarlos de "
                            "forma segura, utilizando filtros como precio, ubicaci√≥n, tipo de propiedad, calificaciones, y m√°s.")
    right.image("img/airbnb.jpg", width=300)
    st.subheader("Datos relevantes:")
    st.markdown("""
                                    - Opera en m√°s de 220 pa√≠ses y regiones.
                                    - M√°s de 4 millones de anfitriones en todo el mundo.
                                    - M√°s de 150 millones de usuarios han reservado a trav√©s de la plataforma.
                                    - Ofrece desde alojamientos econ√≥micos hasta opciones de lujo (Airbnb Luxe).
                                    """)
    img, title = st.columns([1, 7])
    left, right = st.columns([1, 3])
    img.image("img/mx.jpg", width=80)
    title.header("Acerca de M√©xico")
    right.subheader("¬øPor qu√© M√©xico?")
    right.write("La Ciudad de M√©xico, capital del pa√≠s y una de las urbes m√°s grandes y vibrantes de Am√©rica Latina, "
                                "es un centro cultural, hist√≥rico y econ√≥mico de primer nivel. Su mezcla √∫nica de tradiciones prehisp√°nicas, "
                                "arquitectura colonial y modernidad contempor√°nea atrae tanto a turistas como a viajeros de negocios de "
                                "todo el mundo.")
    right.write("En el contexto de Airbnb, la Ciudad de M√©xico representa un mercado urbano en constante expansi√≥n, con "
                                "una amplia variedad de alojamientos que van desde lofts modernos en colonias como Roma y Condesa hasta casas "
                                "tradicionales en Coyoac√°n o San √Ångel. Su dinamismo tur√≠stico, la riqueza cultural y la constante realizaci√≥n de eventos "
                                "internacionales hacen de esta ciudad un caso clave para el an√°lisis de comportamiento en plataformas de hospedaje.")
    left.image("img/mexico.jpg", width=300)
    st.subheader("Datos relevantes:")
    st.markdown("""
                                    - üìç Ubicaci√≥n: Centro del pa√≠s, dentro del Valle de M√©xico.
                                    - üåÜ Poblaci√≥n: Aproximadamente 9.2 millones de habitantes.
                                    - üó∫ Ubicaci√≥n estrat√©gica: Altiplano central, con conexi√≥n a rutas nacionales e internacionales.
                                    - ‚úà F√°cil acceso internacional: El Aeropuerto Internacional Benito Ju√°rez es uno de los m√°s transitados de Am√©rica Latina, con conexiones a m√∫ltiples destinos globales.
                                    - üèô Principales atracciones:
                                        - Z√≥calo y Centro Hist√≥rico (Patrimonio de la Humanidad)
                                        - Museo Nacional de Antropolog√≠a
                                        - Castillo de Chapultepec y su bosque
                                        - Coyoac√°n (hogar de Frida Kahlo)
                                        - Xochimilco y sus trajineras
                                    - üçï Gastronom√≠a ic√≥nica:
                                        - Tacos al pastor, tamales, pozole
                                        - Alta cocina mexicana reconocida internacionalmente
                                        - Escena culinaria diversa en colonias como Polanco, Roma y Condesa
                                    """)
    img, title = st.columns([1, 7])
    left, right = st.columns([3, 1])
    img.image("img/usa.png", width=80)
    title.header("Acerca de Chicago")
    left.subheader("¬øPor qu√© Chicago?")
    left.write("Chicago, ubicada en el estado de Illinois, es la tercera ciudad m√°s grande de Estados Unidos y uno "
                        "de los destinos tur√≠sticos y culturales m√°s importantes del pa√≠s. Con una arquitectura emblem√°tica, "
                        "una escena art√≠stica vibrante y una rica historia, la ciudad atrae a millones de visitantes cada a√±o.")
    left.write("En el contexto de Airbnb, Chicago representa un mercado urbano din√°mico con una gran diversidad "
                                "de alojamientos, desde apartamentos modernos en el centro hasta casas hist√≥ricas en barrios "
                                "residenciales. Su perfil tur√≠stico, junto con eventos internacionales y zonas de alta demanda como "
                                "The Loop, Lincoln Park o Wicker Park, la convierten en un punto clave para el an√°lisis de comportamiento "
                                "en plataformas de hospedaje.")
    right.image("img/chicago.jpg", width=300)
    st.subheader("Datos relevantes:")
    st.markdown("""
                                    - üìç Ubicaci√≥n: Estado de Illinois, Estados Unidos
                                    - üåÜ Poblaci√≥n: Aproximadamente 2.7 millones de habitantes.
                                    - üó∫ Ubicaci√≥n estrat√©gica: A orillas del lago M√≠chigan, con vistas panor√°micas y actividades acu√°ticas.
                                    - ‚úà F√°cil acceso internacional: El Aeropuerto O‚ÄôHare es uno de los m√°s transitados del mundo, con vuelos a casi todos los continentes.
                                    - üèô Principales atracciones:
                                        - Millennium Park (con el famoso "Bean")
                                        - Willis Tower (Skydeck con piso de vidrio)
                                        - Art Institute of Chicago (uno de los mejores museos del mundo)
                                        - Riverwalk (paseo a lo largo del r√≠o Chicago)
                                        - Navy Pier (zona de entretenimiento junto al lago)
                                    - üçï Gastronom√≠a ic√≥nica:
                                        - Pizza estilo Chicago (deep-dish)
                                        - Hot dogs "Chicago-style"
                                        - Gran oferta multicultural en barrios como Pilsen, Chinatown y Little Italy
                                    """)
    img, title = st.columns([1, 7])
    left, right = st.columns([1, 3])
    img.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
    title.header("Acerca de Rep√∫blica Checa")
    right.subheader("¬øPor qu√© Rep√∫blica Checa?")
    right.write("La Rep√∫blica Checa, con Praga como su capital y joya tur√≠stica, es un destino europeo conocido por su historia medieval, "
                "arquitectura g√≥tica y barroca, y su vibrante vida cultural. Praga es uno de los destinos m√°s visitados de Europa Central, "
                "atrayendo a millones de turistas cada a√±o por su belleza arquitect√≥nica y ambiente acogedor.")
    right.write("En el contexto de Airbnb, la ciudad de Praga representa un mercado europeo consolidado y de alto valor tur√≠stico. "
                "Con una oferta diversa de alojamientos que van desde apartamentos en edificios hist√≥ricos hasta modernos lofts junto al r√≠o Moldava, "
                "la capital checa permite estudiar c√≥mo interact√∫an la demanda estacional, la regulaci√≥n del alquiler a corto plazo y la oferta "
                "tur√≠stica en un entorno urbano altamente competitivo.")
    left.image("https://media.istockphoto.com/id/1179665824/es/foto/praga-rep%C3%BAblica-checa.jpg?s=612x612&w=0&k=20&c=hK0fZY0NtPosI56JVkhiHFp4CwOp5mE-FdU3gaC3WFA=", width=300)
    st.subheader("Datos relevantes:")
    st.markdown("""
                - üìç Ubicaci√≥n: Europa Central, rodeada por Alemania, Austria, Eslovaquia y Polonia.
                - üåÜ Poblaci√≥n: Alrededor de 10.7 millones en todo el pa√≠s; m√°s de 1.3 millones en Praga.
                - üó∫ Patrimonio cultural: Ciudad vieja de Praga declarada Patrimonio de la Humanidad por la UNESCO.
                - ‚úà Acceso internacional: Aeropuerto V√°clav Havel conecta con destinos europeos, asi√°ticos y americanos.
                - üèô Principales atracciones:
                    - Castillo de Praga (uno de los m√°s grandes del mundo)
                    - Puente de Carlos (icono g√≥tico sobre el Moldava)
                    - Plaza de la Ciudad Vieja con el Reloj Astron√≥mico
                    - Barrio Jud√≠o y sinagogas hist√≥ricas
                    - Museo Nacional y la colina de Pet≈ô√≠n
                - üç∫ Gastronom√≠a y bebida:
                    - Cerveza checa mundialmente reconocida (Pilsner, Budvar)
                    - Platos t√≠picos como goulash, sv√≠ƒçkov√°, knedl√≠ky
                    - Cafeter√≠as bohemias y restaurantes de cocina internacional
                """)
    img, title = st.columns([1, 7])
    left, right = st.columns([3, 1])
    
    img.image("img/arg.jpg", width=80)
    title.header("Acerca de Buenos Aires")
    left.subheader("¬øPor qu√© Buenos Aires?")
    left.write("Buenos Aires es la capital y ciudad m√°s poblada de la Rep√∫blica Argentina. Sus nombres oficiales son Ciudad de Buenos Aires o Ciudad Aut√≥noma de Buenos Aires (CABA).‚Äã Tambi√©n es llamada Capital Federal "
                "Est√° situada en la regi√≥n centro-este del pa√≠s, sobre la orilla sur del R√≠o de la Plata"
                "Buenos Aires es una ciudad cosmopolita y un importante destino tur√≠stico.Su compleja infraestructura la convierte en una de las metr√≥polis de mayor importancia de Am√©rica")
    left.write("En el contexto de Airbnb, tiene una relevancia considerable en el ecosistema de Airbnb en Am√©rica Latina, tanto por volumen de oferta como por comportamiento de los usuarios."
                "Debido a las restricciones cambiarias en Argentina, Airbnb se convirti√≥ en una forma de generar ingresos en moneda fuerte (USD) para propietarios")                           
    right.image("img/buenosa.jpg", width=300)
    st.subheader("Datos relevantes:")
    st.markdown("""
                - üìç Conocida como la "Par√≠s de Sudam√©rica" por su arquitectura, cultura y vida nocturna.
                - üåÜ Aeropuerto principal: Ezeiza (EZE), con vuelos directos a Am√©rica, Europa y algunos destinos de Asia.
                - üó∫ Tango: Declarado Patrimonio Cultural Inmaterial por la UNESCO. Es com√∫n ver shows en vivo y clases.
                - ‚úà Atrae m√°s de 2 millones de turistas internacionales al a√±o, siendo la ciudad m√°s visitada de Sudam√©rica junto con R√≠o de Janeiro
                - üèô Principales atracciones:
                    - Teatro Col√≥n: Uno de los teatros l√≠ricos m√°s importantes del mundo.
                    - Museos: Museo Nacional de Bellas Artes, MALBA (arte latinoamericano), Museo de Arte Moderno.
                    - Caf√©s hist√≥ricos: Caf√© Tortoni es el m√°s emblem√°tico.
                - üç∫ Gastronom√≠a y bebida:
                    - Famosa por su carne vacuna, especialmente el asado argentino.
                    - Cultura de caf√©s y panader√≠as (facturas, medialunas).
                    - Creciente escena de restaurantes gourmet y cocina de autor.
                """)                            
  
    
    

                                    

                                    

##########################################
#Modelado explicativo

elif View == "Modelado explicativo":

    #Variable para tipo de variable a graficar
    if 'variable_type' not in st.session_state:
        st.session_state.variable_type = 'numeric'

    #Titulos y encabezados
    st.sidebar.markdown(f"""
    <div style="display: flex; align-items: center;">
        <img src="data:image/png;base64,{img_base64}" width="70">
        <h1 style="margin-left: 10px; margin-bottom: 0;">Airbnb</h1>
    </div>
    """, unsafe_allow_html=True)
    st.sidebar.title("DASHBOARD")

    #Mostrar Dataset
    st.sidebar.subheader("‚Ñπ Dataset")
    check_box = st.sidebar.checkbox(label = "Mostrar Dataset")
    if check_box:
        #Chicago
        st.subheader("Chicago dataset info:")
        st.write(df_chicago)
        st.write(df_chicago.columns)
        st.write(df_chicago.describe())
        #Mexico
        st.subheader("M√©xico dataset info:")
        st.write(df_mexico)
        st.write(df_mexico.columns)
        st.write(df_mexico.describe())
        #praga
        st.subheader("Praga dataset info:")
        st.write(df_praga)
        st.write(df_praga.columns)
        st.write(df_praga.describe())
         #buenos aires
        st.subheader("BuenosAires dataset info:")
        st.write(df_buenosaires)
        st.write(df_buenosaires.columns)
        st.write(df_buenosaires.describe())

    st.sidebar.header("‚öô Opciones")

    #Cambiar entre numericas y categoricas
    st.sidebar.subheader("üß¨ Variables")
    button_type_variable = st.sidebar.button(label = "Cambiar tipo de variable")
    if button_type_variable:
        if st.session_state.variable_type == 'numeric':
            st.session_state.variable_type = 'categoric'
        else:
            st.session_state.variable_type = 'numeric'
    st.sidebar.write("Actual: " + st.session_state.variable_type)
    if st.session_state.variable_type == 'categoric':
        category_variable_selected = st.sidebar.selectbox(label = "Variables categoricas", options = text_cols)
        table = freq_tbl(df_chicago[category_variable_selected])
        table3 = freq_tbl(df_mexico[category_variable_selected])
        table6 = freq_tbl(df_praga[category_variable_selected])
        table9 = freq_tbl(df_buenosaires[category_variable_selected])
    else:
        numeric_variable_selected = st.sidebar.selectbox(label = "Variables numericas", options = numeric_cols)
        #Categorizar las variables numerica (Chicago)
        dataNumeric = df_chicago.copy()
        n = 8269
        Max = dataNumeric[numeric_variable_selected].max()
        Min = dataNumeric[numeric_variable_selected].min()
        R = Max - Min
        ni = max(5, min(12, round(1 + 3.32 * np.log10(n))))
        intervalos = np.linspace(Min, Max, ni + 1)
        categorias = [f"Intervalo de: {intervalos[i]:.2f} a {intervalos[i+1]:.2f}" for i in range(len(intervalos) - 1)]
        dataNumeric[numeric_variable_selected] = pd.cut(x = dataNumeric[numeric_variable_selected], bins = intervalos, labels = categorias)
        table = freq_tbl(dataNumeric[numeric_variable_selected])
        #Categorizar las variables numerica (Mexico)
        dataNumeric = df_mexico.copy()
        n = 26582
        Max = dataNumeric[numeric_variable_selected].max()
        Min = dataNumeric[numeric_variable_selected].min()
        R = Max - Min
        ni = max(5, min(12, round(1 + 3.32 * np.log10(n))))
        intervalos = np.linspace(Min, Max, ni + 1)
        categorias = [f"Intervalo de: {intervalos[i]:.2f} a {intervalos[i+1]:.2f}" for i in range(len(intervalos) - 1)]
        dataNumeric[numeric_variable_selected] = pd.cut(x = dataNumeric[numeric_variable_selected], bins = intervalos, labels = categorias)
        table3 = freq_tbl(dataNumeric[numeric_variable_selected])
        #Categorizar las variables numerica (praga)
        dataNumeric = df_praga.copy()
        n = 10108
        Max = dataNumeric[numeric_variable_selected].max()
        Min = dataNumeric[numeric_variable_selected].min()
        R = Max - Min
        ni = max(5, min(12, round(1 + 3.32 * np.log10(n))))
        intervalos = np.linspace(Min, Max, ni + 1)
        categorias = [f"Intervalo de: {intervalos[i]:.2f} a {intervalos[i+1]:.2f}" for i in range(len(intervalos) - 1)]
        dataNumeric[numeric_variable_selected] = pd.cut(x = dataNumeric[numeric_variable_selected], bins = intervalos, labels = categorias)
        table6 = freq_tbl(dataNumeric[numeric_variable_selected])
        #Categorizar las variables numerica (buenos aires)
        dataNumeric = df_buenosaires.copy()
        n = 35172
        Max = dataNumeric[numeric_variable_selected].max()
        Min = dataNumeric[numeric_variable_selected].min()
        R = Max - Min
        ni = max(5, min(12, round(1 + 3.32 * np.log10(n))))
        intervalos = np.linspace(Min, Max, ni + 1)
        categorias = [f"Intervalo de: {intervalos[i]:.2f} a {intervalos[i+1]:.2f}" for i in range(len(intervalos) - 1)]
        dataNumeric[numeric_variable_selected] = pd.cut(x = dataNumeric[numeric_variable_selected], bins = intervalos, labels = categorias)
        table9 = freq_tbl(dataNumeric[numeric_variable_selected])

    #Cambiar la frecuencia para los graficos
    st.sidebar.subheader("üîç Filtro de frecuencia")
    frequency = st.sidebar.number_input("Frecuencia: " , min_value=0, max_value=None, value=0, step=None, format="%d")

    #Mostrar analisis univariado
    st.sidebar.subheader("üß™ An√°lisis univariado")
    check_box_analysis = st.sidebar.checkbox(label = "Mostrar analisis")
    if check_box_analysis:
        #Obtengo un analisis univariado de una variable en especifico
        if st.session_state.variable_type == 'categoric':
            st.header("An√°lisis univariado de: " + category_variable_selected)
        else:
            st.header("An√°lisis univariado de: " + numeric_variable_selected)
        #Chicago
        table2 = table[table['frequency'] > frequency]
        #Mexico
        table4 = table3[table3['frequency'] > frequency]
        #Praga
        table7 = table6[table6['frequency'] > frequency]
        #Argentina
        table10 = table9[table9['frequency'] > frequency]
        
        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.write(table2)
        left.image("img/mx.jpg", width=80)
        left.write(table4)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.write(table4)
        right.image("img/arg.jpg", width=80)
        right.write(table10)


    #Mostrar graficos
    st.sidebar.subheader("Graficos üìä")
    check_box_line = st.sidebar.checkbox(label = "üìà Grafico de lineas")
    check_box_bars = st.sidebar.checkbox(label = "üìä Grafico de barras")
    check_box_scatter = st.sidebar.checkbox(label = "üü¢ Grafico de dispersion")
    check_box_area = st.sidebar.checkbox(label = "üìâ Grafico de area")
    check_box_pie = st.sidebar.checkbox(label = "ü•ß Grafico de pastel")
    check_box_box = st.sidebar.checkbox(label = "üì¶ Grafico de caja")

    #Grafica de lineas

    if  check_box_line or check_box_bars or check_box_scatter or check_box_area or check_box_pie:
        if st.session_state.variable_type == 'categoric':
            st.header("Graficos de: " + category_variable_selected)
        else: 
            st.header("Graficos de: " + numeric_variable_selected)

    if check_box_line:
        st.subheader("Line Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.line(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.line(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.line(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.line(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
        else:
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.line(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.line(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.line(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
             #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.line(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)
        

    if check_box_bars:
        st.subheader("Bar Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.bar(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", color= category_variable_selected, width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.bar(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", color= category_variable_selected, width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.bar(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", color= category_variable_selected, width = 1600, height =600)
            #buenos aires
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.bar(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", color= category_variable_selected, width = 1600, height =600)
        else:
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.bar(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", color= numeric_variable_selected, width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.bar(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", color= numeric_variable_selected, width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.bar(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", color= numeric_variable_selected, width = 1600, height =600)
            #Arg
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.bar(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", color= numeric_variable_selected, width = 1600, height =600)

        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        #Arg
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)

    if check_box_scatter:
        st.subheader("Scatter Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.scatter(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.scatter(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.scatter(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.scatter(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
        else:
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.scatter(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.scatter(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.scatter(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.scatter(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)

        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)


    if check_box_area:
        st.subheader("Area Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.area(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.area(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.area(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.area(data_frame = Filtro, x = category_variable_selected, 
            y = "frequency", width = 1600, height =600)
        else:
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.area(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.area(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.area(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.area(data_frame = Filtro, x = numeric_variable_selected, 
            y = "frequency", width = 1600, height =600)

        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)

    if check_box_pie:
        st.subheader("Pie Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.pie(data_frame = Filtro, names = category_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.pie(data_frame = Filtro, names = category_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.pie(data_frame = Filtro, names = category_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.pie(data_frame = Filtro, names = category_variable_selected, 
            values = "frequency", width = 1600, height =600)
        else:
            #Chicago
            table2 = table.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table2[table2['frequency'] > frequency]
            figure1 = px.pie(data_frame = Filtro, names = numeric_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #Mexico
            table4 = table3.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table4[table4['frequency'] > frequency]
            figure2 = px.pie(data_frame = Filtro, names = numeric_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #Praga
            table7 = table6.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table7[table7['frequency'] > frequency]
            figure3 = px.pie(data_frame = Filtro, names = numeric_variable_selected, 
            values = "frequency", width = 1600, height =600)
            #argentina
            table10 = table9.drop(['percentage', 'cumulative_perc'], axis = 1)
            Filtro = table10[table10['frequency'] > frequency]
            figure4 = px.pie(data_frame = Filtro, names = numeric_variable_selected, 
            values = "frequency", width = 1600, height =600)


        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)

    if check_box_box:
        st.subheader("Box Plot")
        if st.session_state.variable_type == 'categoric':
            #Chicago
            figure1 = px.box(df_chicago, x=category_variable_selected, orientation='h')
            #Mexico
            figure2 = px.box(df_mexico, x=category_variable_selected, orientation='h')
            #Praga
            figure3 = px.box(df_praga, x=category_variable_selected, orientation='h')
            #argentina
            figure4 = px.box(df_buenosaires, x=category_variable_selected, orientation='h')
        else:
            #Chicago
            figure1 = px.box(df_chicago, x=numeric_variable_selected, orientation='h')
            #Mexico
            figure2 = px.box(df_mexico, x=numeric_variable_selected, orientation='h')
            #Praga
            figure3 = px.box(df_praga, x=numeric_variable_selected, orientation='h')
            #argentina
            figure4 = px.box(df_buenosaires, x=numeric_variable_selected, orientation='h')

        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)


##########################################
#Contenido de la vista 2
elif View == "Modelado predictivo":

    #Variable para tipo de variable a graficar
    if 'variable_type' not in st.session_state:
        st.session_state.variable_type = 'numeric'

    if st.session_state.variable_type == 'categoric':
            for col in chicago_text_df:
                #Chicago
                frequencies = chicago_text_df[col].value_counts()
                chicago_text_df[col] = chicago_text_df[col].map(frequencies)
                #Mexico
                frequencies2 = mexico_text_df[col].value_counts()
                mexico_text_df[col] = mexico_text_df[col].map(frequencies2)
                #Praga
                frequencies3 = praga_text_df[col].value_counts()
                praga_text_df[col] = praga_text_df[col].map(frequencies3)
                #Arg
                frequencies4 = buenosaires_text_df[col].value_counts()
                buenosaires_text_df[col] = buenosaires_text_df[col].map(frequencies4)

    #Titulos y encabezados 
    st.sidebar.markdown(f"""
    <div style="display: flex; align-items: center;">
        <img src="data:image/png;base64,{img_base64}" width="70">
        <h1 style="margin-left: 10px; margin-bottom: 0;">Airbnb</h1>
    </div>
    """, unsafe_allow_html=True)
    st.sidebar.title("DASHBOARD")

    st.sidebar.subheader("‚Ñπ Dataset")
    check_box = st.sidebar.checkbox(label = "Mostrar Dataset")
    st.sidebar.header("‚öô Opciones")

    #Cambiar entre numericas y categoricas
    st.sidebar.subheader("üß¨ Variables")
    button_type_variable = st.sidebar.button(label = "Cambiar tipo de variable")
    if button_type_variable:
        if st.session_state.variable_type == 'numeric':
            st.session_state.variable_type = 'categoric'
        else:
            st.session_state.variable_type = 'numeric'
    st.sidebar.write("Actual: " + st.session_state.variable_type)

    check_box_heatmap = st.sidebar.checkbox(label = "üå° Mapa de calor")

    st.sidebar.subheader("‚û°üìâ Regresion lineal simple")
    if st.session_state.variable_type == 'numeric':
        x_options = numeric_cols
        y_options = numeric_cols
    else:
        x_options = text_cols
        y_options = text_cols
    x_selected_simple = st.sidebar.selectbox(label = "x", options = x_options, key = "simple_x")
    y_selected_simple = st.sidebar.selectbox(label = "y", options = y_options, key = "simple_y")
    check_box_scatter_simple = st.sidebar.checkbox(label = "üü¢ Diagrama de dispersion", key = "simple_scatter")
    check_box_info_simple = st.sidebar.checkbox(label = "‚Ñπ Informacion del modelo", key = "simple_info")

    st.sidebar.subheader("‚û°üìä Regresion lineal multiple")
    x_selected_multi = st.sidebar.multiselect(label = "x", options = x_options, key = "multi_x")
    y_selected_multi = st.sidebar.selectbox(label = "y", options = y_options, key = "multi_y")
    check_box_scatter_multi = st.sidebar.checkbox(label = "üü¢ Diagrama de dispersion", key = "multi_scatter")
    check_box_info_multi = st.sidebar.checkbox(label = "‚Ñπ Informacion del modelo", key = "multi_info")

    st.sidebar.subheader("üìäüîë Regresion logistica")
    x_selected_log = st.sidebar.multiselect(label = "x", options = numeric_cols, key = "log_x")
    y_selected_log = st.sidebar.selectbox(label = "y", options = text_cols, key = "log_y")
    dichotomous_column = df_chicago[y_selected_log]
    unique_categories = dichotomous_column.unique()
    val_selected_log = st.sidebar.selectbox(label = "Valor a predecir", options = unique_categories)
    check_box_matriz = st.sidebar.checkbox(label = "‚ùìüî≤ Matriz de confusion")
    check_box_info_log = st.sidebar.checkbox(label = "‚Ñπ Informacion del modelo", key = "log_info")

    #Mostrar Dataset
    if check_box:
        #Chicago
        st.subheader("Chicago dataset info:")
        st.write(df_chicago)
        st.write(df_chicago.columns)
        st.write(df_chicago.describe())
        #Mexico
        st.subheader("M√©xico dataset info:")
        st.write(df_mexico)
        st.write(df_mexico.columns)
        st.write(df_mexico.describe())
        #Praga
        st.subheader("Praga dataset info:")
        st.write(df_praga)
        st.write(df_praga.columns)
        st.write(df_praga.describe())
        #Argentina
        st.subheader("Buenos Aires dataset info:")
        st.write(df_buenosaires)
        st.write(df_buenosaires.columns)
        st.write(df_buenosaires.describe())

    #Mapa de calor
    if check_box_heatmap:
        st.subheader("Heatmap")
        if st.session_state.variable_type == 'numeric':
            #Chicago
            correlation = abs(chicago_numeric_df.corr())
            #Mexico
            correlation2 = abs(mexico_numeric_df.corr())
            #Praga
            correlation3 = abs(praga_numeric_df.corr())
             #Mexico
            correlation4 = abs(buenosaires_numeric_df.corr())
        else:
            #Chicago
            correlation = abs(chicago_text_df.corr())
            #Mexico
            correlation2 = abs(mexico_text_df.corr())
            #Praga
            correlation3 = abs(praga_text_df.corr())
            #argentina
            correlation4 = abs(buenosaires_text_df.corr())

        #Chicago
        figure1 = px.imshow(
            correlation,
            text_auto=True,
            color_continuous_scale="Viridis",
            aspect="auto"
        )
        #Mexico
        figure2 = px.imshow(
            correlation2,
            text_auto=True,
            color_continuous_scale="Viridis",
            aspect="auto"
        )
        #Praga
        figure3 = px.imshow(
            correlation3,
            text_auto=True,
            color_continuous_scale="Viridis",
            aspect="auto"
        )
        #argentina
        figure4 = px.imshow(
            correlation4,
            text_auto=True,
            color_continuous_scale="Viridis",
            aspect="auto"
        )
        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)


    #Regresion lineal simple
    if check_box_scatter_simple or check_box_info_simple:
        st.header("Regresion Lineal Simple")
        if st.session_state.variable_type == 'numeric':
            #Chicago
            Vars_Indep_chicago = chicago_numeric_df[[x_selected_simple]] 
            Var_Dep_chicago = chicago_numeric_df[y_selected_simple]
            df5  = chicago_numeric_df
            #Mexico
            Vars_Indep_mexico = mexico_numeric_df[[x_selected_simple]] 
            Var_Dep_mexico = mexico_numeric_df[y_selected_simple]
            df6  = mexico_numeric_df
            #Praga
            Vars_Indep_praga = praga_numeric_df[[x_selected_simple]] 
            Var_Dep_praga = praga_numeric_df[y_selected_simple]
            df6  = praga_numeric_df
            #argentina
            Vars_Indep_buenosaires = buenosaires_numeric_df[[x_selected_simple]] 
            Var_Dep_buenosaires = buenosaires_numeric_df[y_selected_simple]
            df8  = buenosaires_numeric_df
        else:
            #Chicago
            Vars_Indep_chicago = chicago_text_df[[x_selected_simple]] 
            Var_Dep_chicago = chicago_text_df[y_selected_simple]
            df5 = chicago_text_df
            #Mexico
            Vars_Indep_mexico = mexico_text_df[[x_selected_simple]] 
            Var_Dep_mexico = mexico_text_df[y_selected_simple]
            df6 = mexico_text_df
            #Praga
            Vars_Indep_praga = praga_text_df[[x_selected_simple]] 
            Var_Dep_praga = praga_text_df[y_selected_simple]
            df7 = praga_text_df
            #argentina
            Vars_Indep_buenosaires = buenosaires_text_df[[x_selected_simple]] 
            Var_Dep_buenosaires = buenosaires_text_df[y_selected_simple]
            df8 = buenosaires_text_df
        #Chicago
        model_chicago = LinearRegression()
        model_chicago.fit(X = Vars_Indep_chicago, y = Var_Dep_chicago)
        y_pred = model_chicago.predict(X = df5[[x_selected_simple]])
        df_simple_chicago = df5.copy()
        df_simple_chicago.insert(0, 'Predicciones', y_pred)
        #Mexico
        model_mexico = LinearRegression()
        model_mexico.fit(X = Vars_Indep_mexico, y = Var_Dep_mexico)
        y_pred = model_mexico.predict(X = df6[[x_selected_simple]])
        df_simple_mexico = df6.copy()
        df_simple_mexico.insert(0, 'Predicciones', y_pred)
        #Praga
        model_praga = LinearRegression()
        model_praga.fit(X = Vars_Indep_praga, y = Var_Dep_praga)
        y_pred = model_praga.predict(X = df6[[x_selected_simple]])
        df_simple_praga = df6.copy()
        df_simple_praga.insert(0, 'Predicciones', y_pred)
        #argentina
        model_buenosaires = LinearRegression()
        model_buenosaires.fit(X = Vars_Indep_buenosaires, y = Var_Dep_buenosaires)
        y_pred = model_buenosaires.predict(X = df8[[x_selected_simple]])
        df_simple_buenosaires = df8.copy()
        df_simple_buenosaires.insert(0, 'Predicciones', y_pred)



    #Diagramas de dispersion
    if check_box_scatter_simple:
        st.subheader("Scatter Plot")
        #Chicago
        df_long = pd.melt(df_simple_chicago, id_vars=x_selected_simple, value_vars=[y_selected_simple, "Predicciones"],
                  var_name="Tipo", value_name="Valor")
        figure1 = px.scatter(df_long, x=x_selected_simple, y="Valor", color="Tipo", color_discrete_map={
                "Predicciones": "red"
            }, width = 1600, height =600)
        #Mexico
        df_long = pd.melt(df_simple_mexico, id_vars=x_selected_simple, value_vars=[y_selected_simple, "Predicciones"],
                  var_name="Tipo", value_name="Valor")
        figure2 = px.scatter(df_long, x=x_selected_simple, y="Valor", color="Tipo", color_discrete_map={
                "Predicciones": "red"
            }, width = 1600, height =600)
        #Praga
        df_long = pd.melt(df_simple_praga, id_vars=x_selected_simple, value_vars=[y_selected_simple, "Predicciones"],
                  var_name="Tipo", value_name="Valor")
        figure3 = px.scatter(df_long, x=x_selected_simple, y="Valor", color="Tipo", color_discrete_map={
                "Predicciones": "red"
            }, width = 1600, height =600)
        #argentina
        df_long = pd.melt(df_simple_buenosaires, id_vars=x_selected_simple, value_vars=[y_selected_simple, "Predicciones"],
                  var_name="Tipo", value_name="Valor")
        figure4 = px.scatter(df_long, x=x_selected_simple, y="Valor", color="Tipo", color_discrete_map={
                "Predicciones": "red"
            }, width = 1600, height =600)
        left, right = st.columns([1, 1])
        right.image("img/usa.png", width=80)
        right.plotly_chart(figure1)
        left.image("img/mx.jpg", width=80)
        left.plotly_chart(figure2)
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.plotly_chart(figure3)
        right.image("img/arg.jpg", width=80)
        right.plotly_chart(figure4)
        

    #Mostrar info del modelo
    if check_box_info_simple:
        st.subheader("Model info: " + " " + y_selected_simple + " vs " + x_selected_simple)
        left, right = st.columns([1, 1])
        #Chicago
        coef_Deter = model_chicago.score(X = Vars_Indep_chicago, y = Var_Dep_chicago)
        coef_Correl = np.sqrt(coef_Deter)
        a = model_chicago.coef_[0]
        b = model_chicago.intercept_
        right.image("img/usa.png", width=80)
        right.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
        right.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
        right.write(f"Modelo matem√°tico: y = {a:.4f}x + {b:.4f}")
        #Mexico
        coef_Deter = model_mexico.score(X = Vars_Indep_mexico, y = Var_Dep_mexico)
        coef_Correl = np.sqrt(coef_Deter)
        a = model_mexico.coef_[0]
        b = model_mexico.intercept_
        left.image("img/mx.jpg", width=80)
        left.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
        left.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
        left.write(f"Modelo matem√°tico: y = {a:.4f}x + {b:.4f}")
        #Praga
        coef_Deter = model_praga.score(X = Vars_Indep_praga, y = Var_Dep_praga)
        coef_Correl = np.sqrt(coef_Deter)
        a = model_praga.coef_[0]
        b = model_praga.intercept_
        left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
        left.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
        left.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
        left.write(f"Modelo matem√°tico: y = {a:.4f}x + {b:.4f}")
        #argentina
        coef_Deter = model_buenosaires.score(X = Vars_Indep_buenosaires, y = Var_Dep_buenosaires)
        coef_Correl = np.sqrt(coef_Deter)
        a = model_buenosaires.coef_[0]
        b = model_buenosaires.intercept_
        right.image("img/arg.jpg", width=80)
        right.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
        right.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
        right.write(f"Modelo matem√°tico: y = {a:.4f}x + {b:.4f}")

    #Regresion lineal multiple
    if check_box_scatter_multi or check_box_info_multi:
        st.header("Regresion Lineal Multiple")
        if x_selected_multi:
            if st.session_state.variable_type == 'numeric':
                #Chicago
                Vars_Indep = chicago_numeric_df[x_selected_multi] 
                Var_Dep = chicago_numeric_df[y_selected_multi]
                df5 = chicago_numeric_df
                #Mexico
                Vars_Indep2 = mexico_numeric_df[x_selected_multi]
                Var_Dep2 = mexico_numeric_df[y_selected_multi]
                df6 = mexico_numeric_df
                #Praga
                Vars_Indep3 = praga_numeric_df[x_selected_multi]
                Var_Dep3 = praga_numeric_df[y_selected_multi]
                df7 = praga_numeric_df
                #buenos aires
                Vars_Indep4 = buenosaires_numeric_df[x_selected_multi] 
                Var_Dep4 = buenosaires_numeric_df[y_selected_multi]
                df8 = buenosaires_numeric_df
            else:
                #Chicago
                Vars_Indep = chicago_text_df[x_selected_multi] 
                Var_Dep = chicago_text_df[y_selected_multi]
                df5 = chicago_text_df
                #Mexico
                Vars_Indep2 = mexico_text_df[x_selected_multi]
                Var_Dep2 = mexico_text_df[y_selected_multi]
                df6 = mexico_text_df
                #Praga
                Vars_Indep3 = praga_text_df[x_selected_multi]
                Var_Dep3 = praga_text_df[y_selected_multi]
                df7 = praga_text_df
                #argentina
                Vars_Indep4 = buenosaires_text_df[x_selected_multi] 
                Var_Dep4 = buenosaires_text_df[y_selected_multi]
                df8 = buenosaires_text_df
            #Chicago
            model_chicago = LinearRegression()
            model_chicago.fit(X = Vars_Indep, y = Var_Dep)
            y_pred = model_chicago.predict(X = df5[x_selected_multi])
            df_multi = df5.copy()
            df_multi.insert(0, 'Predicciones', y_pred)
            #Mexico
            model_mexico = LinearRegression()
            model_mexico.fit(X = Vars_Indep2, y = Var_Dep2)
            y_pred = model_mexico.predict(X = df6[x_selected_multi])
            df_multi2 = df6.copy()
            df_multi2.insert(0, 'Predicciones', y_pred)
            #Praga
            model_praga = LinearRegression()
            model_praga.fit(X = Vars_Indep3, y = Var_Dep3)
            y_pred = model_praga.predict(X = df7[x_selected_multi])
            df_multi3 = df7.copy()
            df_multi3.insert(0, 'Predicciones', y_pred)
            #argentina
            model_buenosaires = LinearRegression()
            model_buenosaires.fit(X = Vars_Indep4, y = Var_Dep4)
            y_pred = model_buenosaires.predict(X = df8[x_selected_multi])
            df_multi4 = df8.copy()
            df_multi4.insert(0, 'Predicciones', y_pred)
        else:
            st.write("Selecione alguna variable x")

    #Diagrama de dispersion
    if check_box_scatter_multi:
        st.subheader("Scatter Plot")
        if x_selected_multi:
            #Chicago
            df_long = pd.melt(df_multi, id_vars=x_selected_multi, value_vars=[y_selected_multi, "Predicciones"],
                    var_name="Tipo", value_name="Valor")
            figure1 = px.scatter(df_long, x=x_selected_multi, y="Valor", color="Tipo", color_discrete_map={
                    "Predicciones": "red"
                }, width = 1600, height =600)
            #Mexico
            df_long = pd.melt(df_multi2, id_vars=x_selected_multi, value_vars=[y_selected_multi, "Predicciones"],
                    var_name="Tipo", value_name="Valor")
            figure2 = px.scatter(df_long, x=x_selected_multi, y="Valor", color="Tipo", color_discrete_map={
                    "Predicciones": "red"
                }, width = 1600, height =600)
            #Praga
            df_long = pd.melt(df_multi3, id_vars=x_selected_multi, value_vars=[y_selected_multi, "Predicciones"],
                    var_name="Tipo", value_name="Valor")
            figure3 = px.scatter(df_long, x=x_selected_multi, y="Valor", color="Tipo", color_discrete_map={
                    "Predicciones": "red"
                }, width = 1600, height =600)
                #Chicago
            df_long = pd.melt(df_multi4, id_vars=x_selected_multi, value_vars=[y_selected_multi, "Predicciones"],
                    var_name="Tipo", value_name="Valor")
            figure4 = px.scatter(df_long, x=x_selected_multi, y="Valor", color="Tipo", color_discrete_map={
                    "Predicciones": "red"
                }, width = 1600, height =600)

            left, right = st.columns([1, 1])
            right.image("img/usa.png", width=80)
            right.plotly_chart(figure1)
            left.image("img/mx.jpg", width=80)
            left.plotly_chart(figure2)
            left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
            left.plotly_chart(figure3)
            right.image("img/arg.jpg", width=80)
            right.plotly_chart(figure4)
    
    #Mostrar info del modelo
    if check_box_info_multi:
        if x_selected_multi:
            st.subheader(f"Model info: {y_selected_multi} vs {x_selected_multi}")
            left, right = st.columns([1, 1])
            #Chicago
            coef_Deter = model_chicago.score(X = Vars_Indep, y = Var_Dep)
            coef_Correl = np.sqrt(coef_Deter)
            a = model_chicago.coef_
            b = model_chicago.intercept_
            left.image("img/mx.jpg", width=80)
            left.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
            left.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
            model_math = "y = " + f"{b:.4f}"
            for i, coef in enumerate(a):
                model_math += f" + ({coef:.4f}) * {Vars_Indep.columns[i]}"
            left.write(f"Modelo matem√°tico: {model_math}")
            #Mexico
            coef_Deter = model_mexico.score(X = Vars_Indep2, y = Var_Dep2)
            coef_Correl = np.sqrt(coef_Deter)
            a = model_mexico.coef_
            b = model_mexico.intercept_
            right.image("img/usa.png", width=80)
            right.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
            right.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
            model_math = "y = " + f"{b:.4f}"
            for i, coef in enumerate(a):
                model_math += f" + ({coef:.4f}) * {Vars_Indep.columns[i]}"
            right.write(f"Modelo matem√°tico: {model_math}")
            #Praga
            coef_Deter = model_praga.score(X = Vars_Indep3, y = Var_Dep3)
            coef_Correl = np.sqrt(coef_Deter)
            a = model_praga.coef_
            b = model_praga.intercept_
            left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
            left.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
            left.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
            model_math = "y = " + f"{b:.4f}"
            for i, coef in enumerate(a):
                model_math += f" + ({coef:.4f}) * {Vars_Indep.columns[i]}"
            left.write(f"Modelo matem√°tico: {model_math}")
            #argentina
            coef_Deter = model_buenosaires.score(X = Vars_Indep4, y = Var_Dep4)
            coef_Correl = np.sqrt(coef_Deter)
            a = model_buenosaires.coef_
            b = model_buenosaires.intercept_
            right.image("img/arg.jpg", width=80)
            right.write(f"R (Indice de correlacion) =  {coef_Correl:.4f}")
            right.write(f"R^2 (Indice de determinacion) = {coef_Deter:.4f}")
            model_math = "y = " + f"{b:.4f}"
            for i, coef in enumerate(a):
                model_math += f" + ({coef:.4f}) * {Vars_Indep.columns[i]}"
            right.write(f"Modelo matem√°tico: {model_math}")

    #Regresion logistica
    if check_box_matriz or check_box_info_log:
        st.header("Regresion Logistica")
        if x_selected_log:
            #Chicago
            df2 = df_chicago.copy()
            df2[y_selected_log] =df2[y_selected_log].mask(df2[y_selected_log] != val_selected_log, "Other Value")
            Vars_Indep_chicago = df2[x_selected_log]
            Var_Dep_chicago = df2[y_selected_log]
            X = Vars_Indep_chicago
            y = Var_Dep_chicago
            X_train, X_test, y_train, y_test =train_test_split(X, y, test_size= 0.3, random_state=None)
            escalar = StandardScaler()
            X_train = escalar.fit_transform(X_train)
            X_test = escalar.transform(X_test)
            algoritmo = LogisticRegression()
            algoritmo.fit(X_train, y_train)
            y_pred = algoritmo.predict(X_test)
            matriz_chicago = confusion_matrix(y_test, y_pred, labels=["Other Value", val_selected_log])
            precision_chicago = precision_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            precision_other_chicago = precision_score(y_test, y_pred, average="binary", pos_label="Other Value")
            exactitud_chicago = accuracy_score(y_test, y_pred)
            sensibilidad_chicago = recall_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            sensibilidad_other_chicago = recall_score(y_test, y_pred, average="binary", pos_label="Other Value")
            #Mexico
            df2 = df_mexico.copy()
            df2[y_selected_log] =df2[y_selected_log].mask(df2[y_selected_log] != val_selected_log, "Other Value")
            Vars_Indep_mexico = df2[x_selected_log]
            Var_Dep_mexico = df2[y_selected_log]
            X = Vars_Indep_mexico
            y = Var_Dep_mexico
            X_train, X_test, y_train, y_test =train_test_split(X, y, test_size= 0.3, random_state=None)
            escalar = StandardScaler()
            X_train = escalar.fit_transform(X_train)
            X_test = escalar.transform(X_test)
            algoritmo_chicago = LogisticRegression()
            algoritmo_chicago.fit(X_train, y_train)
            y_pred = algoritmo_chicago.predict(X_test)
            matriz_mexico = confusion_matrix(y_test, y_pred, labels=["Other Value", val_selected_log])
            precision_mexico = precision_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            precision_other_mexico = precision_score(y_test, y_pred, average="binary", pos_label="Other Value")
            exactitud_mexico = accuracy_score(y_test, y_pred)
            sensibilidad_mexico = recall_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            sensibilidad_other_mexico = recall_score(y_test, y_pred, average="binary", pos_label="Other Value")
            #Praga
            df3 = df_praga.copy()
            df3[y_selected_log] =df3[y_selected_log].mask(df3[y_selected_log] != val_selected_log, "Other Value")
            Vars_Indep_praga = df3[x_selected_log]
            Var_Dep_praga = df3[y_selected_log]
            X = Vars_Indep_praga
            y = Var_Dep_praga
            X_train, X_test, y_train, y_test =train_test_split(X, y, test_size= 0.3, random_state=None)
            escalar = StandardScaler()
            X_train = escalar.fit_transform(X_train)
            X_test = escalar.transform(X_test)
            algoritmo_chicago = LogisticRegression()
            algoritmo_chicago.fit(X_train, y_train)
            y_pred = algoritmo_chicago.predict(X_test)
            matriz_praga = confusion_matrix(y_test, y_pred, labels=["Other Value", val_selected_log])
            precision_praga = precision_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            precision_other_praga = precision_score(y_test, y_pred, average="binary", pos_label="Other Value")
            exactitud_praga = accuracy_score(y_test, y_pred)
            sensibilidad_praga = recall_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            sensibilidad_other_praga = recall_score(y_test, y_pred, average="binary", pos_label="Other Value")

            #argentina
            df2 = df_buenosaires.copy()
            df2[y_selected_log] =df2[y_selected_log].mask(df2[y_selected_log] != val_selected_log, "Other Value")
            Vars_Indep_buenosaires = df2[x_selected_log]
            Var_Dep_buenosaires = df2[y_selected_log]
            X = Vars_Indep_buenosaires
            y = Var_Dep_buenosaires
            X_train, X_test, y_train, y_test =train_test_split(X, y, test_size= 0.3, random_state=None)
            escalar = StandardScaler()
            X_train = escalar.fit_transform(X_train)
            X_test = escalar.transform(X_test)
            algoritmo_chicago = LogisticRegression()
            algoritmo_chicago.fit(X_train, y_train)
            y_pred = algoritmo_chicago.predict(X_test)
            matriz_buenosaires = confusion_matrix(y_test, y_pred, labels=["Other Value", val_selected_log])
            precision_buenosaires = precision_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            precision_other_buenosaires = precision_score(y_test, y_pred, average="binary", pos_label="Other Value")
            exactitud_buenosaires = accuracy_score(y_test, y_pred)
            sensibilidad_buenosaires = recall_score(y_test, y_pred, average="binary", pos_label=val_selected_log)
            sensibilidad_other_buenosaires = recall_score(y_test, y_pred, average="binary", pos_label="Other Value")

        else:
            st.write("Selecione alguna variable x")

    if check_box_matriz:
        st.subheader('Matriz de Confusion')
        if x_selected_log:
            z = [[1, 0],
                [4, 1]]
            # Colores fijos por √≠ndice
            colorscale = [
                [0.0, '#64db4f'],
                [0.25, '#64db4f'],
                [0.25, '#e04040'],
                [0.5, '#e04040'],
                [0.5, '#e04040'],
                [0.75, '#64db4f'],
                [0.75, '#64db4f'],
                [1.0, '#64db4f']
            ]
            #Chicago
            # Anotaciones reales de tu matriz
            text = [[str(matriz_chicago[1][0]), str(matriz_chicago[0][0])],
                    [str(matriz_chicago[1][1]), str(matriz_chicago[0][1])]]
            # Crear figura tipo heatmap con anotaciones
            figure1 = go.Figure(data=go.Heatmap(
                z=z,
                x = ['Real Positivo', 'Real Negativo'],
                y = ['Pred. Negativo', 'Pred. Positivo'],
                text=text,
                texttemplate="%{text}",
                textfont={"size": 16},
                colorscale=colorscale,
                showscale=False,
                hoverinfo="x+y+text"
            ))
            figure1.update_layout(
                xaxis_title='Valor Real',
                yaxis_title='Valor de Predicci√≥n'
            )
            #Mexico
            # Anotaciones reales de tu matriz
            text = [[str(matriz_mexico[1][0]), str(matriz_mexico[0][0])],
                    [str(matriz_mexico[1][1]), str(matriz_mexico[0][1])]]
            # Crear figura tipo heatmap con anotaciones
            figure2 = go.Figure(data=go.Heatmap(
                z=z,
                x = ['Real Positivo', 'Real Negativo'],
                y = ['Pred. Negativo', 'Pred. Positivo'],
                text=text,
                texttemplate="%{text}",
                textfont={"size": 16},
                colorscale=colorscale,
                showscale=False,
                hoverinfo="x+y+text"
            ))
            figure2.update_layout(
                xaxis_title='Valor Real',
                yaxis_title='Valor de Predicci√≥n'
            )
            #praga
            # Anotaciones reales de tu matriz
            text = [[str(matriz_praga[1][0]), str(matriz_praga[0][0])],
                    [str(matriz_praga[1][1]), str(matriz_praga[0][1])]]
            # Crear figura tipo heatmap con anotaciones
            figure3 = go.Figure(data=go.Heatmap(
                z=z,
                x = ['Real Positivo', 'Real Negativo'],
                y = ['Pred. Negativo', 'Pred. Positivo'],
                text=text,
                texttemplate="%{text}",
                textfont={"size": 16},
                colorscale=colorscale,
                showscale=False,
                hoverinfo="x+y+text"
            ))
            figure3.update_layout(
                xaxis_title='Valor Real',
                yaxis_title='Valor de Predicci√≥n'
            )
            #argentina
            # Anotaciones reales de la matriz
            text = [[str(matriz_buenosaires[1][0]), str(matriz_buenosaires[0][0])],
                    [str(matriz_buenosaires[1][1]), str(matriz_buenosaires[0][1])]]
            # Crear figura tipo heatmap con anotaciones
            figure4 = go.Figure(data=go.Heatmap(
                z=z,
                x = ['Real Positivo', 'Real Negativo'],
                y = ['Pred. Negativo', 'Pred. Positivo'],
                text=text,
                texttemplate="%{text}",
                textfont={"size": 16},
                colorscale=colorscale,
                showscale=False,
                hoverinfo="x+y+text"
            ))
            figure4.update_layout(
                xaxis_title='Valor Real',
                yaxis_title='Valor de Predicci√≥n'
            )
            left, right = st.columns([1, 1])
            right.image("img/usa.png", width=80)
            right.plotly_chart(figure1)
            left.image("img/mx.jpg", width=80)
            left.plotly_chart(figure2)
            left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
            left.plotly_chart(figure3)
            right.image("img/arg.jpg", width=80)
            right.plotly_chart(figure4)
    
    if check_box_info_log:
        st.subheader(f"Model info: {y_selected_log} vs {x_selected_log}")
        if x_selected_log:
            left, right = st.columns([1, 1])
            #Mexico
            left.image("img/mx.jpg", width=80)
            left.write(f"Exactitud del modelo: { exactitud_mexico:.4f}")
            left.write(f"*Valor: {val_selected_log}*")
            left.write(f"Precision del modelo: {precision_mexico:.4f}")
            left.write(f"Sensibilidad del modelo: {sensibilidad_mexico:.4f}")
            left.write(f"*Valor: Otro*")
            left.write(f"Precision del modelo: {precision_other_mexico:.4f}")
            left.write(f"Sensibilidad del modelo: {sensibilidad_other_mexico:.4f}")
            #Chicago
            right.image("img/usa.png", width=80)
            right.write(f"Exactitud del modelo: { exactitud_chicago:.4f}")
            right.write(f"*Valor: {val_selected_log}*")
            right.write(f"Precision del modelo: {precision_chicago:.4f}")
            right.write(f"Sensibilidad del modelo: {sensibilidad_chicago:.4f}")
            right.write(f"*Valor: Otro*")
            right.write(f"Precision del modelo: {precision_other_chicago:.4f}")
            right.write(f"Sensibilidad del modelo: {sensibilidad_other_chicago:.4f}")
            #Praga
            left.image("https://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_Czech_Republic.svg", width=80)
            left.write(f"Exactitud del modelo: { exactitud_praga:.4f}")
            left.write(f"*Valor: {val_selected_log}*")
            left.write(f"Precision del modelo: {precision_praga:.4f}")
            left.write(f"Sensibilidad del modelo: {sensibilidad_praga:.4f}")
            left.write(f"*Valor: Otro*")
            left.write(f"Precision del modelo: {precision_other_praga:.4f}")
            left.write(f"Sensibilidad del modelo: {sensibilidad_other_praga:.4f}")
            #argentina
            right.image("img/arg.jpg", width=80)
            right.write(f"Exactitud del modelo: { exactitud_buenosaires:.4f}")
            right.write(f"*Valor: {val_selected_log}*")
            right.write(f"Precision del modelo: {precision_buenosaires:.4f}")
            right.write(f"Sensibilidad del modelo: {sensibilidad_buenosaires:.4f}")
            right.write(f"*Valor: Otro*")
            right.write(f"Precision del modelo: {precision_other_buenosaires:.4f}")
            right.write(f"Sensibilidad del modelo: {sensibilidad_other_buenosaires:.4f}")
